// Generated by CoffeeScript 1.7.1
(function() {
  var App, app, extend, global, riot;

  extend = function (){var a,b,c,d,e,f,g=arguments[0]||{},h=1,i=arguments.length,j=!1;for("boolean"==typeof g&&(j=g,g=arguments[h]||{},h++),"object"==typeof g||m.isFunction(g)||(g={}),h===i&&(g=this,h--);i>h;h++)if(null!=(e=arguments[h]))for(d in e)a=g[d],c=e[d],g!==c&&(j&&c&&(m.isPlainObject(c)||(b=m.isArray(c)))?(b?(b=!1,f=a&&m.isArray(a)?a:[]):f=a&&m.isPlainObject(a)?a:{},g[d]=m.extend(j,f,c)):void 0!==c&&(g[d]=c));return g};

  if (typeof window !== "undefined" && window !== null) {
    global = window;
    if (global.riot == null) {
      throw "riot not defined";
    }
    riot = global.riot;
  } else {
    global = exports;
    riot = require("./riotjs");
  }

  App = function(conf) {
    var self;
    self = riot.observable(this);
    self = extend(self, conf);
    setTimeout(function() {
      return self.trigger("ready");
    }, 1);
    return self;
  };

  app = riot.observable(function(arg) {
    var instance;
    if (!arg) {
      return instance;
    }
    if (typeof arg === "function") {
      return app.on("ready", arg);
    } else {
      instance = new App(arg);
      return instance.on("ready", function() {
        return app.trigger("ready", instance);
      });
    }
  });

  global.app = app;

}).call(this);

//# sourceMappingURL=app.map
