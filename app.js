// Generated by CoffeeScript 1.7.1
(function() {
  var App, global, riot,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  Object.defineProperty(Object.prototype, "extend", {
    enumerable: false,
    value: function(from) {
      var dest, props;
      props = Object.getOwnPropertyNames(from);
      dest = this;
      props.forEach(function(name) {
        var destination;
        if ((__indexOf.call(dest, name) >= 0)) {
          destination = Object.getOwnPropertyDescriptor(from, name);
          return Object.defineProperty(dest, name, destination);
        }
      });
      return this;
    }
  });

  if (typeof window !== "undefined" && window !== null) {
    global = window;
    if (typeof riot === "undefined" || riot === null) {
      throw "riot not defined";
    }
  } else {
    global = exports;
    riot = require("riotjs");
  }

  App = function(conf) {
    var self;
    self = riot.observable(this);
    self.extend(conf);
    setTimeout(function() {
      return self.trigger("ready");
    }, 1);
    return self;
  };

  global.app = riot.observable(function(arg) {
    var instance;
    if (!arg) {
      return instance;
    }
    if (typeof arg === "function") {
      return app.on("ready", arg);
    } else {
      instance = new App(arg);
      return instance.on("ready", function() {
        return app.trigger("ready", instance);
      });
    }
  });

}).call(this);

//# sourceMappingURL=app.map
